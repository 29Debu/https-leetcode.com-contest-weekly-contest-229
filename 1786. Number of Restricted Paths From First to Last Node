vector<vector<pair<long long, long long>>>adj;
const int mod = 1e9 + 7;
vector<long long> mem;
int dp(int a, long long dist[], int b){
    int ans = 0;
    if(a == b)
        return 1;
    if(mem[a] != -1)
        return mem[a];
    for(auto g : adj[a]){
        int neighbour1 = g.first;
        if(dist[neighbour1] < dist[a]){
            ans = (ans + dp(neighbour1, dist, b))%mod;
        }
    }
    return mem[a] = ans;
}
class Solution {
public:
    int countRestrictedPaths(int n, vector<vector<int>>& edges) {
        mem.clear();
        mem.resize(n+1, -1);
        adj.clear();
        adj.resize(n+1);
        for (auto e : edges){
            int u = e[0], v = e[1], wt = e[2];
            adj[u].push_back(make_pair(v, wt));
            adj[v].push_back(make_pair(u, wt));
        }
            priority_queue<pair<long long, int>> pq;
            long long dist[n+1];
            for(int i = 0; i <= n; i++){
                dist[i] = 1e10;
            }
            dist[n] = 0;
            pq.push({0, n});
            while(!pq.empty()){
                auto fs = pq.top();
                pq.pop();
                int p = fs.second;
                long long m = -fs.first;
                for (auto ad : adj[p]){
                    int vv = ad.first, wtt = ad.second;
                    if(dist[vv] > wtt + m){
                        dist[vv] = wtt + m;
                        pq.push({-dist[vv], vv});
                    }
                }
            }
    
        return dp(1, dist, n);
        
    }
    
};
